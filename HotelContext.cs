using HotelBooking.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging.Debug;

namespace HotelBooking.API;

public class HotelDbContext(
    DbContextOptions<HotelDbContext> options,
    IConfiguration configuration)
    : DbContext(options)
{
    private readonly IConfiguration _configuration = configuration;

    public DbSet<Hotel> Hotel { get; set; } = null!;
    public DbSet<Room> Room { get; set; } = null!;

    public DbSet<Booking> Booking { get; set; } = null!;

    /// <summary>
    /// By doing this it means we can see the SQL that is generated by LINQ and this means optimisation can be performed on queries more easily.
    /// </summary>
    /// <param name="optionsBuilder"></param>
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseLoggerFactory(
                new LoggerFactory(new[] { new DebugLoggerProvider() }));
        }

    }

    /// <summary>
    /// Field names in the database should be lower-case
    /// </summary>
    /// <param name="modelBuilder"></param>
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Hotel>(entity =>
        {
            entity.Property(e => e.Id)
                .HasColumnName("id");

            entity.Property(e => e.Name)
                .HasColumnName("name");

            entity.Property(e => e.Address)
                .HasColumnName("address");

            entity.Property(e => e.Postcode)
                .HasColumnName("postcode");

            entity.Property(e => e.WebAddress)
                .HasColumnName("web_address");
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.Property(e => e.Id)
                  .HasColumnName("id")
                  .ValueGeneratedOnAdd();

            entity.Property(e => e.HotelId)
                  .HasColumnName("hotel_id")
                  .IsRequired();

            entity.Property(e => e.Capacity)
                  .HasColumnName("capacity")
                  .IsRequired();

            entity.Property(e => e.RoomType)
                .HasColumnName("room_type")
                .IsRequired();

            entity.HasOne<Hotel>()
                  .WithMany()
                  .HasForeignKey(e => e.HotelId)
                  .IsRequired();

        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.Property(e => e.Id)
                  .HasColumnName("id");

            entity.Property(e => e.RoomId)
                .HasColumnName("room_id");

            entity.Property(e => e.Title)
                  .HasColumnName("title");

            entity.Property(e => e.FirstName)
                  .HasColumnName("first_name");

            entity.Property(e => e.Surname)
                  .HasColumnName("surname");

            entity.Property(e => e.EmailAddress)
                  .HasColumnName("email_address");

            entity.Property(e => e.PhoneNumber)
                  .HasColumnName("phone_number");

            entity.Property(e => e.Paid)
                  .HasColumnName("paid");

            entity.Property(e => e.Arrival)
                  .HasColumnName("arrival");

            entity.Property(e => e.Departure)
                  .HasColumnName("departure");

            entity.Property(e => e.NumberOfGuests)
                  .HasColumnName("number_of_guests");

            entity.Property(e => e.Breakfast)
                  .HasColumnName("breakfast");

            entity.HasOne<Room>()
                  .WithMany()
                  .HasForeignKey(e => e.RoomId);
        });
    }
}

